## Fuseki Server configuration file.

@prefix :        <#> .
@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.apache.org/2016/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix perm:    <http://apache.org/jena/permissions/Assembler#> .

# TDB
tdb:DatasetTDB  rdfs:subClassOf  ja:RDFDataset .
tdb:GraphTDB    rdfs:subClassOf  ja:Model .

[] rdf:type fuseki:Server .

[] ja:loadClass    "org.apache.jena.permissions.SecuredAssembler" .
[] ja:loadClass    "solutions.linked.jena.security.SecuredDatasetAssembler" .
    perm:Model       rdfs:subClassOf  ja:NamedModel .

# Creates dataset that will be located in /db
# and secured with secEvaluator
:dataset rdf:type perm:SecuredDataset ;
         tdb:location "/db" ;
         perm:evaluatorImpl :secEvaluator ;
         perm:securityBaseModel :model ;
         perm:securityGraphName "http://www.smartswissparticipation.com/security" .

:model a ja:MemoryModel ;
    ja:content [ja:externalContent <file:/sec_data.ttl>] .

# Creates security graph in dataset
# and initializes with content
:securityGraph rdf:type tdb:GraphTDB ;
    tdb:dataset :dataset ;
    tdb:graphName <http://www.smartswissparticipation.com/security> .

# Creates security evaluator that will be using securityGraph
# to check user's permissions
:secEvaluator rdf:type perm:Evaluator ;
    perm:args [
        rdf:_1 :securityGraph ;
    ] ;
    perm:evaluatorClass "solutions.linked.jena.security.GraphSecurityEvaluator" .

# Creates service to serve RDF data through HTTP
<#service1> rdf:type fuseki:Service ;
    fuseki:name                       "ds" ;       # http://host:port/ds
    fuseki:serviceQuery               "sparql" ;   # SPARQL query service
    fuseki:serviceQuery               "query" ;    # SPARQL query service (alt name)
    fuseki:serviceUpdate              "update" ;   # SPARQL update service
    fuseki:serviceReadWriteGraphStore "data" ;     # SPARQL Graph store protocol (read and write)
    # A separate read-only graph store endpoint:
    fuseki:serviceReadGraphStore      "get" ;      # SPARQL Graph store protocol (read only)
    fuseki:dataset                   :dataset ;
